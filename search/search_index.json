{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Euphonium documentation","text":"<p>Euphonium is a highly extensible audio streaming software. It's multiplatform, also supporting low cost MCU's like espressif ESP32 series.</p>"},{"location":"#features","title":"Features:","text":"<ul> <li>Clean and lightweight web-ui</li> <li>Supports multiple plugins: Spotify streaming, Bluetooth (on esp32), Web Radio, Jellyfin</li> <li>Fully modular architecture</li> <li>Easily extendible and portable to new hardware, thanks to the internal Berry-lang powered scripting engine.</li> </ul>"},{"location":"#required-hardware-for-esp32","title":"Required hardware for esp32:","text":"<ul> <li>Any ESP32 chip with at least 4MB of flash and 4MB of PSRAM. Wrover chips are usually a good call :)</li> </ul>"},{"location":"#installing-a-prebuilt-version","title":"Installing a prebuilt version","text":"<p>Feel free to try Euphonium by flashing a newest release. All you need to do is to have <code>esptool.py</code> installed on your system (comes with esp-idf). Unpack the <code>euphonium-{version}.tar.gz</code> and run: <code>flash_all.sh {your serial port}</code> to install it.</p>"},{"location":"#building-euphonium-yourself","title":"Building Euphonium yourself","text":"<p>See here for development setup instructions.</p>"},{"location":"getting-started/","title":"Getting started with Euphonium","text":"<p>The fastest way to give euphonium a go is to use prebuilt version from github releases.</p>"},{"location":"getting-started/#required-hardware-for-esp32","title":"Required hardware for esp32:","text":"<ul> <li>Any ESP32 chip with at least 4MB of flash and 4MB of PSRAM. Wrover chips are usually a good call :)</li> </ul>"},{"location":"getting-started/#installing-a-prebuilt-version","title":"Installing a prebuilt version","text":"<p>Flashing a prebuilt version only consists of a few steps: - Download the newest release. (File with name <code>euphonium-vX.X.X.tar.gz</code>) - Unpack it - Flash it by running <code>sh flash_all.sh {your serial port}</code> - </p>"},{"location":"getting-started/#configuring-the-system","title":"Configuring the system","text":"<ul> <li>Reboot the board after flashing.</li> <li>After few seconds \"Euphonium\" network should appear.</li> <li>Connect to it. The password is <code>euphonium</code>.</li> <li>You will now be taken to the WiFi configuration page. In case the page does not open automatically - connect to <code>192.168.4.1</code></li> </ul>"},{"location":"getting-started/#dac-configuration","title":"DAC configuration","text":"<p>In the \"DAC configuration\" section you can configure the DAC. Euphonium provides an automated configurator for more popular systems. But you can also manually select, and configure the DAC pins.</p>"},{"location":"getting-started/#enjoy-your-music","title":"Enjoy your music","text":"<p>This is all that's required to get euphonium up and running.</p>"},{"location":"hardware/","title":"Hardware","text":"<p>Euphonium has been confirmed to work fine with a bunch of hardware.</p> <p>ESP32-Specific</p> <p>Please note that Euphonium officially works on any Linux / MacOS machine. This list is only specific to the ESP32 platform.</p>"},{"location":"hardware/#officially-supported-boards","title":"Officially supported boards","text":"<p>All of following boards have a automatic configuration support in he web interface.</p>"},{"location":"hardware/#ai-thinker-esp32-audio-kit","title":"Ai-Thinker ESP32 Audio-Kit","text":"<p>These boards are widely available on different stores for around 10 EUR. </p> <p>Codec differences</p> <p>Older versions of this board come with an <code>AC101</code> audio codec, while newer ones come with <code>ES8311</code>. Both versions are supported by Euphonium.</p> <p></p>"},{"location":"hardware/#espressif-lyra-t-v43","title":"Espressif Lyra-T v4.3","text":"<p>Official Espressif's devboard. Powered by <code>ES8311</code> codec.</p> <p></p>"},{"location":"hardware/#officially-supported-dacs","title":"Officially supported DACs","text":"<p>These dacs are supported by euphonium, but require manual pin configuration.</p>"},{"location":"hardware/#es8311","title":"ES8311","text":""},{"location":"hardware/#ac101","title":"AC101","text":""},{"location":"hardware/#tas5711","title":"TAS5711","text":""},{"location":"hardware/#internal-dac-of-esp32","title":"Internal DAC of ESP32","text":""},{"location":"hardware/#ma12070p-and-ma12040p","title":"MA12070p and MA12040p","text":""},{"location":"plugins/","title":"Plugins","text":"<p>Euphonium integrates with a number of plugins that extend its functionality.</p>"},{"location":"plugins/#webradio","title":"WebRadio","text":"<p>This plugin adds support for streaming radios from the internet. It provides a simple web interface for searching through different radio stations, powered by <code>radio-browser.info</code>.</p>"},{"location":"plugins/#spotify","title":"Spotify","text":"<p>This plugin turns Euphonium into a Spotify-Connect speaker. It allows you to stream audio from their vast audio library, and control it from the spotify apps.</p> <p>Powered by cspot.</p> <p>Warning - this requires Spotify premium</p>"},{"location":"plugins/#bluetooth","title":"Bluetooth","text":"<p>(esp32 only)</p> <p>Makes Euphonium act as a Bluetooth A2DP speaker. Simply connect to it, and play your favorite music.</p>"},{"location":"plugins/#jellyfin","title":"Jellyfin","text":""},{"location":"plugins/#planned-plugins","title":"Planned plugins","text":"<ul> <li>AirPlay</li> <li>YouTube / ChromeCast simulator via DIAL</li> <li>Snapcast client</li> <li>Snapcast server</li> </ul>"},{"location":"status/","title":"Status","text":"<p>Euphonium is currently in state of rapid development. </p>"},{"location":"status/#roadmap","title":"Roadmap","text":"<p>As of January 2022, most of the core functionality is already implemented. Currently in feature freeze until end of January, in order to prepare the system for wider use.</p> <p>January:</p> <ul> <li> Setup a documentation page.</li> <li> Get basic infrastucture working via GitHub.</li> <li> Setup reference API for berry and HTTP API.</li> </ul> <p>Feburary:</p> <ul> <li> Stabilize Spotify, WebRadio and Bluetooth functionality.</li> <li> Assemble some basic hardware, test out battery efficiency.</li> <li> Try to get more feedback on the platform.</li> </ul> <p>March  - [x] Design and implement new web interface  - [x] Provide more mature hardware APIs  - [x] Mobile app as scanner  - [ ] Implement snapcast client (in progress)</p> <p>TODO  - [ ] YouTube client  - [ ] Test vendor APIs</p>"},{"location":"http/","title":"Euphonium REST API","text":"<p>By it's design, Euphonium is a modular system. The REST API consists of the main set of endpoints available on every system, and then of endpoints defined by given plugins.</p>"},{"location":"http/devtools/","title":"DevTools Plugin API","text":"<p>Extension of Euphonium REST API. This plugin provides an API that allows for modification of the internal scripts, a functionality required by th web-ide.</p>"},{"location":"http/devtools/#events","title":"Events","text":"<p>This plugin does not provide custom events.</p>"},{"location":"http/devtools/#devtools","title":"DevTools","text":""},{"location":"http/devtools/#get-devtoolsfile","title":"<code>GET</code> <code>/devtools/file</code>","text":"<p>Returns list of all files available in the scripts filesystem.</p>"},{"location":"http/devtools/#parameters","title":"Parameters","text":"<p>This endpoint does not take any parameters.</p>"},{"location":"http/devtools/#response","title":"Response","text":"Returns list of files <p>Response type <code>application/json</code> <pre><code>[\n\"app.be\",\n\"init.be\",\n\"esp32/dac.be\"\n]\n</code></pre></p>"},{"location":"http/devtools/#post-devtoolsfilefilepath","title":"<code>POST</code> <code>/devtools/file/:filePath</code>","text":"<p>Updates content of the file under <code>filePath</code>. In case of file not existing, it creates one.</p>"},{"location":"http/devtools/#parameters_1","title":"Parameters","text":"Parameter type Description <code>filePath</code> path Path to the file, including name <code>body</code> body Contents of the file"},{"location":"http/devtools/#response_1","title":"Response","text":"Returns list of files <p>Response type <code>application/json</code> <pre><code>[\n\"app.be\",\n\"init.be\",\n\"esp32/dac.be\"\n]\n</code></pre></p>"},{"location":"http/devtools/#get-devtoolslogs","title":"<code>GET</code> <code>/devtools/logs</code>","text":"<p>Returns newest logfile.</p>"},{"location":"http/devtools/#parameters_2","title":"Parameters","text":"<p>This endpoint does not take any parameters.</p>"},{"location":"http/devtools/#response_2","title":"Response","text":"Returns logs <p>Response type <code>text/plain</code>. This response is not a json, its just a list of logs split by a newline. <pre><code>I [cspot] ZeroconfAuthenticator.cpp:26: Got request for info\nI [cspot] ZeroconfAuthenticator.cpp:26: Got request for info\nI [cspot] ZeroconfAuthenticator.cpp:26: Got request for info\nI [persistor] ConfigPersistor.cpp:71: Sending file: index.html\nI [persistor] ConfigPersistor.cpp:71: Sending file: assets/index.4aec51d4.css\nI [persistor] ConfigPersistor.cpp:71: Sending file: assets/index.a6e012ba.js\nI [persistor] ConfigPersistor.cpp:71: Sending file: assets/vendor.0e1590e8.js\n</code></pre></p>"},{"location":"http/main/","title":"Euphonium REST API","text":"<p>Every instance of the player exposes a HTTP API, internally used by the web-ui and the web-ide. This API is accessible under the default port.</p> <p>Warning</p> <p>This API is not stable yet, and may change in the future. In particular, authentication is not implemented at this moment.</p>"},{"location":"http/main/#events","title":"Events","text":"<p>Euphonium's HTTP server exposes a endpoint for receiving live events. The events are sent as JSON objects. This is implemented as a long-lived connection to the <code>/events</code> endpoint. This is used for real time updates in the web ide.</p>"},{"location":"http/main/#plugins","title":"Plugins","text":"<p>Manages internal plugins.</p>"},{"location":"http/main/#get-plugins","title":"<code>GET</code> <code>/plugins</code>","text":"<p>Returns list of currently active plugins.</p>"},{"location":"http/main/#parameters","title":"Parameters","text":"<p>This endpoint does not have parameters</p>"},{"location":"http/main/#responses","title":"Responses","text":"Returns list of plugins <p>Response type <code>application/json</code> <pre><code>[\n{\n\"type\": \"plugin\",\n\"name\": \"cspot\",\n\"displayName\": \"Spotify (cspot)\"\n},\n{\n\"type\": \"plugin\",\n\"name\": \"webradio\",\n\"displayName\": \"WebRadio\"\n},\n{\n\"type\": \"app\",\n\"name\": \"webradio\",\n\"displayName\": \"WebRadio\"\n},\n]\n</code></pre></p>"},{"location":"http/main/#get-pluginspluginname","title":"<code>GET</code> <code>/plugins/:pluginName</code>","text":"<p>Returns configuration schema with current values for given plugin.</p>"},{"location":"http/main/#parameters_1","title":"Parameters","text":"Parameter type Description <code>pluginName</code> path <code>string</code>Name of the plugin to retrieve configuration of."},{"location":"http/main/#responses_1","title":"Responses","text":"Returns plugin configuration <p>Response type <code>application/json</code>. Example of spotify. <pre><code>{\n\"configSchema\": {\n\"audioBitrate\": {\n\"value\": \"160\",\n\"tooltip\": \"Audio bitrate\",\n\"type\": \"stringList\",\n\"defaultValue\": \"160\",\n\"listValues\": [ \"96\", \"160\", \"320\" ]\n},\n\"receiverName\": {\n\"tooltip\": \"Speaker's name\",\n\"type\": \"string\",\n\"value\": \"Euphonium (cspot)\",\n\"defaultValue\": \"Euphonium (cspot)\"\n}\n},\n\"themeColor\": \"#1DB954\",\n\"displayName\": \"Spotify (cspot)\"\n}\n</code></pre></p>"},{"location":"http/main/#post-pluginspluginname","title":"<code>POST</code> <code>/plugins/:pluginName</code>","text":"<p>Updates configuration of given plugin schema. This configuration is persisted between reboots.</p>"},{"location":"http/main/#parameters_2","title":"Parameters","text":"Parameter type Description <code>pluginName</code> path <code>string</code>Name of the plugin to retrieve configuration of. <code>body</code> body <code>PluginConfig</code>Content described below."},{"location":"http/main/#requests","title":"Requests","text":"Change spotify configuration <p>Response type <code>application/json</code>. <pre><code>{\n\"audioBitrate\": \"320\",\n\"receiverName\": \"Living room\\'s speaker\"\n}\n</code></pre></p>"},{"location":"http/main/#responses_2","title":"Responses","text":"Returns plugin configuration <p>Request type <code>application/json</code>. Example of spotify. <pre><code>{\n\"configSchema\": {\n\"audioBitrate\": {\n\"value\": \"320\",\n\"tooltip\": \"Audio bitrate\",\n\"type\": \"stringList\",\n\"defaultValue\": \"160\",\n\"listValues\": [ \"96\", \"160\", \"320\" ]\n},\n\"receiverName\": {\n\"tooltip\": \"Speaker's name\",\n\"type\": \"string\",\n\"value\": \"Living room\\'s speaker\",\n\"defaultValue\": \"Euphonium (cspot)\"\n}\n},\n\"themeColor\": \"#1DB954\",\n\"displayName\": \"Spotify (cspot)\"\n}\n</code></pre></p>"},{"location":"http/main/#playback","title":"Playback","text":"<p>Manages the playback state of the system.</p>"},{"location":"http/main/#get-playback","title":"<code>GET</code> <code>/playback</code>","text":"<p>Returns complete current state of playback, containing current track, current position, current volume and current eq settings.</p>"},{"location":"http/main/#parameters_3","title":"Parameters","text":"<p>This endpoint does not have parameters</p>"},{"location":"http/main/#responses_3","title":"Responses","text":"Returns current playback state <p>Response type <code>application/json</code>. Example of spotify. <pre><code>{\n\"song\": {\n\"icon\": \"https://i.scdn.co/image/kocz.jpg\",\n\"songName\": \"Never Gonna Give You Up\",\n\"albumName\": \"Never Gonna Give You Up\",\n\"sourceName\": \"cspot\",\n\"artistName\": \"Rick Astley\",\n},\n\"status\": \"paused\",\n\"volume\": 50,\n\"eq\": {\n\"low\": 0,\n\"mid\": -0.5,\n\"high\": 0\n}\n}\n</code></pre></p>"},{"location":"http/main/#post-playbackvolume","title":"<code>POST</code> <code>/playback/volume</code>","text":"<p>Updates playback current volume.</p>"},{"location":"http/main/#parameters_4","title":"Parameters","text":"Parameter type Description <code>body</code> body <code>Volume</code>Content described below."},{"location":"http/main/#requests_1","title":"Requests","text":"Change volume <p>Request type <code>application/json</code>. Volume is an integer betwen 0 and 100. <pre><code>{\n\"volume\": 100,\n}\n</code></pre></p>"},{"location":"http/main/#responses_4","title":"Responses","text":"Returns current playback state <p>Response type <code>application/json</code>. Example of spotify. <pre><code>{\n\"song\": {\n\"icon\": \"https://i.scdn.co/image/kocz.jpg\",\n\"songName\": \"Never Gonna Give You Up\",\n\"albumName\": \"Never Gonna Give You Up\",\n\"sourceName\": \"cspot\",\n\"artistName\": \"Rick Astley\",\n},\n\"status\": \"paused\",\n\"volume\": 100,\n\"eq\": {\n\"low\": 0,\n\"mid\": -0.5,\n\"high\": 0\n}\n}\n</code></pre></p>"},{"location":"http/main/#post-playbackeq","title":"<code>POST</code> <code>/playback/eq</code>","text":"<p>Updates playback current equalizer settings.</p>"},{"location":"http/main/#parameters_5","title":"Parameters","text":"Parameter type Description <code>body</code> body <code>Eq</code>Content described below."},{"location":"http/main/#requests_2","title":"Requests","text":"Change equalizer settings <p>Request type <code>application/json</code>. Equalizer settings are an object with keys <code>low</code>, <code>mid</code> and <code>high</code>. One value on the scale corresponds to 3 dB. <pre><code>{\n\"low\": 1.25,\n\"mid\": 0,\n\"high\": 0\n}\n</code></pre></p>"},{"location":"http/main/#responses_5","title":"Responses","text":"Returns current playback state <p>Response type <code>application/json</code>. Example of spotify. <pre><code>{\n\"song\": {\n\"icon\": \"https://i.scdn.co/image/kocz.jpg\",\n\"songName\": \"Never Gonna Give You Up\",\n\"albumName\": \"Never Gonna Give You Up\",\n\"sourceName\": \"cspot\",\n\"artistName\": \"Rick Astley\",\n},\n\"status\": \"paused\",\n\"volume\": 100,\n\"eq\": {\n\"low\": 1.25,\n\"mid\": 0,\n\"high\": 0\n}\n}\n</code></pre></p>"},{"location":"http/main/#post-playbackstatus","title":"<code>POST</code> <code>/playback/status</code>","text":"<p>Updates playback current playback status.</p>"},{"location":"http/main/#parameters_6","title":"Parameters","text":"Parameter type Description <code>body</code> body <code>Playback</code>Content described below."},{"location":"http/main/#requests_3","title":"Requests","text":"Change playback settings <p>Request type <code>application/json</code>. Status is either 'playing' or 'paused' <pre><code>{\n\"status\": \"playing\"\n}\n</code></pre></p>"},{"location":"http/main/#responses_6","title":"Responses","text":"Returns current playback state <p>Response type <code>application/json</code>. Example of spotify. <pre><code>{\n\"song\": {\n\"icon\": \"https://i.scdn.co/image/kocz.jpg\",\n\"songName\": \"Never Gonna Give You Up\",\n\"albumName\": \"Never Gonna Give You Up\",\n\"sourceName\": \"cspot\",\n\"artistName\": \"Rick Astley\",\n},\n\"status\": \"playing\",\n\"volume\": 100,\n\"eq\": {\n\"low\": 1.25,\n\"mid\": 0,\n\"high\": 0\n}\n}\n</code></pre></p>"},{"location":"http/main/#system","title":"System","text":"<p>Manages the state of the system.</p>"},{"location":"http/main/#get-system","title":"<code>GET</code> <code>/system</code>","text":"<p>Returns information about current system state.</p>"},{"location":"http/main/#parameters_7","title":"Parameters","text":"<p>This endpoint does not have parameters</p>"},{"location":"http/main/#responses_7","title":"Responses","text":"Returns current system state <p>Response type <code>application/json</code>. <pre><code>{\n\"networkState\": \"online\",\n\"version\": \"0.0.14\"\n}\n</code></pre></p>"},{"location":"http/main/#post-systemreboot","title":"<code>POST</code> <code>/system/reboot</code>","text":"<p>Returns information about current system state.</p>"},{"location":"http/main/#parameters_8","title":"Parameters","text":"<p>Calling this endpoint will reboot the system.</p>"},{"location":"http/main/#responses_8","title":"Responses","text":"Returns current system state <p>Response type <code>application/json</code>. <pre><code>{\n\"version\": \"0.0.14\",\n\"networkState\": \"rebooting\",\n}\n</code></pre></p>"},{"location":"http/main/#wifi","title":"WiFi","text":"<p>Manages state of the WiFi connection</p>"},{"location":"http/main/#get-wifi","title":"<code>GET</code> <code>/wifi</code>","text":"<p>Returns current WiFi state.</p>"},{"location":"http/main/#parameters_9","title":"Parameters","text":"<p>This endpoint does not have parameters</p>"},{"location":"http/main/#responses_9","title":"Responses","text":"Returns current WiFi state <p>Response type <code>application/json</code>. Example of connected to AP. <pre><code>{\n\"state\": \"connected\",\n\"ipAddress\": \"192.168.254.103\"\n}\n</code></pre></p>"},{"location":"http/main/#post-wificonnect","title":"<code>POST</code> <code>/wifi/connect</code>","text":"<p>Connects to WiFi network.</p>"},{"location":"http/main/#parameters_10","title":"Parameters","text":"Parameter type Description <code>body</code> body <code>WiFiSettings</code>Content described below."},{"location":"http/main/#requests_4","title":"Requests","text":"WiFi network parameters <p>Request type <code>application/json</code>. <pre><code>{\n\"ssid\": \"RandomNetwork\",\n\"password\": \"Test123\"\n}\n</code></pre></p>"},{"location":"http/main/#responses_10","title":"Responses","text":"Returns current WiFi state <p>Response type <code>application/json</code>. Example of connected to AP. <pre><code>{\n\"state\": \"connecting\",\n}\n</code></pre></p>"},{"location":"http/main/#post-wifiscan_start","title":"<code>POST</code> <code>/wifi/scan_start</code>","text":"<p>Starts WiFi network scan.</p>"},{"location":"http/main/#parameters_11","title":"Parameters","text":"<p>This endpoint does not have parameters</p>"},{"location":"http/main/#responses_11","title":"Responses","text":"Returns current WiFi state <p>Response type <code>application/json</code>. Example of connected to AP. <pre><code>{\n\"state\": \"scanning\",\n}\n</code></pre></p>"},{"location":"http/ota/","title":"OTA Plugin API","text":"<p>Extension of Euphonium REST API. This plugin provides an API for OTA updates on the <code>esp32</code> platform.</p>"},{"location":"http/ota/#events","title":"Events","text":"<p>This plugin does not provide custom events.</p>"},{"location":"http/ota/#ota","title":"OTA","text":""},{"location":"http/ota/#post-ota","title":"<code>POST</code> <code>/ota</code>","text":"<p>This endpoint sets the URL and <code>sha256</code> of the firmware image to be downloaded, and reboots the device into recovery.</p>"},{"location":"http/ota/#parameters","title":"Parameters","text":"Parameter type Description <code>body</code> body <code>OTA</code>Content described below."},{"location":"http/ota/#requests","title":"Requests","text":"Set OTA url and it's sha256 <p>Request type <code>application/json</code>. <pre><code>{\n\"url\": \"https://github.com/feelfreelinux/euphonium/releases/download/v0.0.14/ota.bin\",\n\"sha256\": \"e25ec6490d7cf480a26b5f18d7a50b8a7db247b18da749f3d938e8581bf92e22\"\n}\n</code></pre></p>"},{"location":"http/ota/#responses","title":"Responses","text":"Returns update OTA manifest <p>Response type <code>application/json</code> <pre><code>{\n\"url\": \"https://github.com/feelfreelinux/euphonium/releases/download/v0.0.14/ota.bin\",\n\"sha256\": \"e25ec6490d7cf480a26b5f18d7a50b8a7db247b18da749f3d938e8581bf92e22\"\n}\n</code></pre></p>"},{"location":"http/webradio/","title":"WebRadio Plugin API","text":"<p>Extension of Euphonium REST API. This plugin provides playback of different HTTP audio streams.</p>"},{"location":"http/webradio/#events","title":"Events","text":"<p>This plugin does not provide custom events.</p>"},{"location":"http/webradio/#webradio","title":"WebRadio","text":""},{"location":"http/webradio/#post-webradio","title":"<code>POST</code> <code>/webradio</code>","text":"<p>In case of another audio source playing, this triggers the web radio source and plays radio with given parameters.</p>"},{"location":"http/webradio/#parameters","title":"Parameters","text":"Parameter type Description <code>body</code> body <code>WebRadio</code>Content described below."},{"location":"http/webradio/#requests","title":"Requests","text":"Set radio url to play <p>Request type <code>application/json</code>. <pre><code>{\n\"coverImage\": \"http://example.com/radio.jpeg\",\n\"url\": \"http://example.com/radio.mp3\",\n\"codec\": \"MP3\",\n\"name\": \"Example Radio\",\n}\n</code></pre></p>"},{"location":"http/webradio/#responses","title":"Responses","text":"Returns set radio settings <p>Response type <code>application/json</code>. <pre><code>{\n\"coverImage\": \"http://example.com/radio.jpeg\",\n\"url\": \"http://example.com/radio.mp3\",\n\"codec\": \"MP3\",\n\"name\": \"Example Radio\",\n}\n</code></pre></p>"},{"location":"plugins/scripting-language/","title":"Scripting language API","text":"<p>Euphonium contains a berry-lang scripting language that can be used to tweak the system for your needs. The following page documents the internal API used in all scripts. Feel free to check <code>euphonium/scripts</code> to see how this is used internally.</p>"},{"location":"plugins/scripting-language/#globals","title":"<code>globals</code>","text":"<p>Global utilities</p>"},{"location":"plugins/scripting-language/#commands","title":"Commands","text":"Command Signature Supported platforms <code>sleep_ms</code> <code>(milliseconds: int) -&gt; void</code>. Pauses execution for given amount of milliseconds. All"},{"location":"plugins/scripting-language/#core","title":"<code>core</code>","text":"<p>Manages euphonium's core functionality, mostly shared utils. </p> <p>Implemented by <code>Core.cpp</code></p>"},{"location":"plugins/scripting-language/#commands_1","title":"Commands","text":"Command Signature Supported platforms <code>core.start_plugin</code> <code>(pluginName: string, pluginConfig: map) -&gt; void</code>Starts given plugin's audio thread with following configuration. All <code>core.platform</code> <code>() -&gt; string</code>.Returns platform on which euphonium is currently running. Result being either <code>esp32</code> or <code>desktop</code> All <code>core.version</code> <code>() -&gt; string</code>.Returns current version of the system. Example result: <code>0.0.14</code> All"},{"location":"plugins/scripting-language/#formcontext","title":"<code>FormContext</code>","text":"<p>Class used in plugins that handles UI creation and interaction in the web-ui.</p> <p>Implemented by <code>form_ctx.be</code></p>"},{"location":"plugins/scripting-language/#class-methods","title":"Class methods","text":"<p>All of the following methods are available on the <code>FormContext</code> class instance.</p> Command Signature Supported platforms <code>text_field</code> <code>(key: string, config: FieldConfig) -&gt; void</code>Adds a text field to the configuration. See <code>FieldConfig</code> below for parameters. All <code>select_field</code> <code>(key: string, config: FieldConfig) -&gt; void</code>Adds a option select / picker field to the configuration. See <code>FieldConfig</code> below for parameters. All <code>checkbox_field</code> <code>(key: string, config: FieldConfig) -&gt; void</code>Adds a checkbox to the configuration. See <code>FieldConfig</code> below for parameters. All <code>create_group</code> <code>(key: string, config: [key: string, label: string]) -&gt; void</code>Adds a new config group to the configuration. All"},{"location":"plugins/scripting-language/#interface-fieldconfig","title":"Interface <code>FieldConfig</code>","text":"Field Signature Field type <code>label</code> <code>string</code>Configuration field's label visible over the control in the interface. All <code>hint</code> <code>string</code>Used as a hint in the text field. <code>text_field</code> <code>default</code> <code>string</code>Field's default value. All <code>values</code> <code>list</code>All of select field's available values. <code>select_field</code> <code>group</code> <code>string</code>Group that a given field belongs to, previously registered with <code>create_group</code> All"},{"location":"plugins/scripting-language/#http","title":"<code>http</code>","text":"<p>Allows for registering endpoints on the internal HTTP server.</p> <p>Implemented by <code>http.be</code> and <code>HTTPModule.cpp</code></p>"},{"location":"plugins/scripting-language/#commands_2","title":"Commands","text":"Command Signature Supported platforms <code>http.handle</code> <code>(method: string, path: string, response_handler: [(request) -&gt; void]) -&gt; void</code>Register a new HTTP endpoint under given <code>path</code>. Response handler is a method that takes <code>HTTPRequest</code> as a parameter. See examples below for usage. All <code>http.emit_event</code> <code>(type: string, body: map) -&gt; void</code>.Broadcasts a server-side event to all connected devices. <code>body</code> will be serialized into json string. All"},{"location":"plugins/scripting-language/#object-httprequest","title":"Object <code>HTTPRequest</code>","text":"Command Signature Supported platforms <code>write_json</code> <code>(body: map, status: int) -&gt; void</code>.Writes a response json to given connection. Body is passed as a map of data to be serialized into json. Status is the HTTP status code of the response. All <code>write_text</code> <code>(body: string, status: int) -&gt; void</code>.Writes the response as <code>text/plain</code>. All <code>json_body</code> <code>() -&gt; map</code>Parses given request's body string into json and returns it as map All <code>query_params</code> <code>() -&gt; map</code>Returns map of parsed query parameters of the given request. All <code>url_params</code> <code>() -&gt; map</code>Returns map of parsed url parameters of the given request. All"},{"location":"plugins/scripting-language/#example","title":"Example","text":"<p>HTTP server usage</p> <p>Handle simple GET and return \"Hello, world!\"</p> <p><pre><code>http.handle('GET', '/hello_world', def (request)\n    request.write_text(\"Hello world!\", 200)\nend)\n</code></pre> Handle POST with json body, return a json response</p> <pre><code>http.handle('POST', '/create_cat', def (request)\n    if request.json_body() == nil\n        http.write_text(\"No body\", request['connection'], 400)\n    else\n       # Parse json body\n       var parsed_body = request.json_body()\n\n       # Create response\n       var response = { 'name': parsed_body['name'], 'age': 3 }\n       request.write_json(response, 200)\n    end\nend)\n</code></pre>"},{"location":"plugins/scripting-language/#playback","title":"<code>playback</code>","text":"<p>Manages playback state of the system.</p>"},{"location":"plugins/scripting-language/#commands_3","title":"Commands","text":"Command Signature Supported platforms <code>playback.set_eq</code> <code>(low: int, mid: int, high: int) -&gt; void</code>.If <code>EqualizerProcessor</code> is enabled, this changes the eq's settings. 1 point on the scale means 3 db. Defaults to 0, 0, 0 (no eq). All <code>playback.set_pause</code> <code>(paused: boolean) -&gt; void</code>.Pauses the playback state. This also triggers a pause event. All <code>playback.empty_buffers</code> <code>() -&gt; void</code>.Empties internal audio buffers of the system. Call this during playback changes / stop pause. All <code>playback.soft_volume</code> <code>(volume: int) -&gt; void</code>Changes the system's software volume. Volume is between <code>0</code> and <code>100</code>. All"},{"location":"plugins/scripting-language/#euphonium","title":"<code>euphonium</code>","text":"<p>Global euphonium instance object. Handles main events, and keeps a state of plugin registry.</p>"},{"location":"plugins/scripting-language/#commands_4","title":"Commands","text":"Command Signature Supported platforms <code>euphonium.register_plugin</code> <code>(plugin: Plugin) -&gt; void</code>Registers a new euphonium plugin. <code>plugin</code> is a instance of plugin to register in the system. All"},{"location":"plugins/scripting-language/#input","title":"<code>input</code>","text":"<p>ESP32 specific</p> <p>Allows registration of callbacks for input events. Useful for adding buttons, encoders and such.</p>"},{"location":"plugins/scripting-language/#commands_5","title":"Commands","text":"Command Signature Supported platforms"},{"location":"plugins/scripting-language/#hooks","title":"<code>hooks</code>","text":"<p>Hooks allow to run different instructions during certain boot stages. Used for example to pull up an IO during boot.</p>"},{"location":"plugins/scripting-language/#commands_6","title":"Commands","text":"Command Signature Supported platforms <code>hooks.add_handler</code> <code>(bootstage: int, handler: [() -&gt; void]) -&gt; void</code>Register a new hook. Different <code>bootstage</code> values described below. All"},{"location":"plugins/scripting-language/#enum-hooksbootstage","title":"enum <code>hooks.BOOTSTAGE</code>","text":"Command Description Supported platforms <code>hooks.ON_INIT</code> Called earliest during boot, after scripting VM init. All <code>hooks.POST_SYSTEM</code> Called after all core logic has been initialized, before plugins startup. All <code>hooks.POST_PLUGIN</code> Called after all plugins have been initialized All <code>hooks.AP_INIT</code> Called after AP network has been initialized. esp32 <code>hooks.WIFI_INIT</code> Called after WiFi has been initialized. esp32"},{"location":"plugins/scripting-language/#example_1","title":"Example","text":"<p>Sample hook that runs after boot</p> <p>Define I2S configuration, output 256 x MCLK clock on GPIO0. <pre><code>hooks.add_handler(hooks.ON_INIT, def ()\n    print(\"On boot called!\")\nend)\n</code></pre></p>"},{"location":"plugins/scripting-language/#i2s","title":"<code>i2s</code>","text":"<p>Controls I2S bus. Mainly used for DAC support.</p> <p>Implemented by <code>I2SDriver.cpp</code></p>"},{"location":"plugins/scripting-language/#commands_7","title":"Commands","text":"Command Signature Supported platforms <code>i2s.install</code> <code>(configuration: I2SConfig) -&gt; void</code>Installs I2S driver. See below for description of I2SConfig structure. esp32 <code>i2s.delete</code> <code>() -&gt; void</code>.Uninstalls the current I2S driver. esp32 <code>i2s.set_expand</code> <code>(src: int, dst: int) -&gt; void</code>.Enables expand from <code>src</code> bits to <code>dst</code> bits in driver write. Useful for 32bit DAC support. esp32 <code>i2s.disable_expand</code> <code>() -&gt; void</code>.Disables bits expand. esp32"},{"location":"plugins/scripting-language/#object-i2sconfig","title":"Object <code>I2SConfig</code>","text":"Field Description <code>sample_rate</code> <code>int</code>Defines sample rate for the incoming data signal. WARNING - Sample rate is only initial, will be further changed in case od dynamic sample rate <code>bits_per_sample</code> <code>int</code>Bits per sample for incoming data. <code>comm_format</code> one of <code>I2S_CHANNEL_FMT_RIGHT_LEFT</code>, <code>I2S_CHANNEL_FMT_ALL_RIGHT</code>, <code>I2S_CHANNEL_FMT_ALL_LEFT</code> or <code>I2S_CHANNEL_FMT_ONLY_RIGHT</code> <code>channel_format</code> one of <code>I2S_COMM_FORMAT_I2S</code>, <code>I2S_COMM_FORMAT_MSB</code>, <code>I2S_COMM_FORMAT_PCM_SHORT</code> or <code>I2S_COMM_FORMAT_PCM_LONG</code> <code>mclk</code> <code>int</code> if defined and larger than 0, outputs given <code>mclk</code> on GPIO0."},{"location":"plugins/scripting-language/#example_2","title":"Example","text":"<p>Sample driver configuration</p> <p>Define I2S configuration, output 256 x MCLK clock on GPIO0. <pre><code>var config = I2SConfig()\nconfig.sample_rate = 44100\nconfig.bits_per_sample = 16\nconfig.comm_format = I2S_CHANNEL_FMT_RIGHT_LEFT\nconfig.channel_format = I2S_COMM_FORMAT_I2S\nconfig.mclk = 256 * 44100\n\ni2s.install(config)\n</code></pre></p>"},{"location":"plugins/scripting-language/#i2c","title":"<code>i2c</code>","text":"<p>Controls I2C bus on supported platforms. Mainly used in different drivers.</p> <p>Implemented by <code>I2CDriver.cpp</code></p>"},{"location":"plugins/scripting-language/#commands_8","title":"Commands","text":"Command Signature Supported platforms <code>i2c.install</code> <code>(sda: int, scl: int) -&gt; void</code>Installs I2C driver under given pins. esp32 <code>i2c.detect</code> <code>(addr:int) -&gt; bool</code>.Tries to detect device under given addr. Returns true if device found. esp32 <code>i2c.read_bytes</code> <code>(addr:int, reg:int, size:int) -&gt; int or nil</code>.Read a value of 1..4 bytes from address addr and register reg. Returns nil if no response. esp32 <code>i2c.write_bytes</code> <code>(addr:int, reg:int, val:bytes) -&gt; nil</code>Writes the val bytes sequence as bytes() to address addr register reg. esp32 <code>i2c.read</code> <code>(addr:int, reg:int, size:int) -&gt; int or nil</code>.Reads a singular bytes from a given register. esp32 <code>i2c.write</code> <code>(addr:int, reg:int, val:int) -&gt; nil</code>Writes a singular byte to a given register. esp32 <code>i2c.write_raw</code> <code>(addr:int, val:bytes) -&gt; nil</code>Write a raw sequence of bytes to the given device. esp32 <code>i2c.read_raw</code> <code>(addr:int, val:bytes, size: int) -&gt; int or nil</code>Writes the val sequence of bytes on the i2c line, and then reads <code>size</code> bytes. esp32"},{"location":"plugins/scripting-language/#example_3","title":"Example","text":"<p>Write few bytes to I2C device</p> <p>Configure I2C on 21 and 23 pins, then perform two writes. <pre><code>i2c.install(21, 23)\n\nvar deviceAddr = 0x10\n\n# Write 0x01 to register 0x00\ni2c.write(deviceAddr, 0x00, 0x01)\n\n# Write byte sequence to register 0x01\ni2c.write_bytes(deviceAddr, 0x01, bytes('1a01'))\n</code></pre></p>"},{"location":"plugins/scripting-language/#gpio","title":"<code>gpio</code>","text":"<p>Controls GPIO pins on supported platforms. Mainly used in different drivers.</p> <p>Implemented by <code>GPIODriver.cpp</code></p>"},{"location":"plugins/scripting-language/#commands_9","title":"Commands","text":"Command Signature Supported platforms <code>gpio.digital_write</code> <code>(gpio: int, state: int) -&gt; void</code>Sets GPIO to LOW/HIGH. Needs physical pin number esp32 <code>gpio.digital_read</code> <code>(gpio: int) -&gt; int</code>Returns digital state of given physical GPIO. Either <code>gpio.LOW</code> or <code>gpio.HIGH</code> esp32 <code>gpio.pin_mode</code> <code>(gpio: int, mode: int) -&gt; int</code>Changes the GPIO mode. Only use if if you know what you're doing, by default Euphonium handles GPIO mode itself. Mode can have the following values: gpio.INPUT, gpio.OUTPUT, gpio.PULLUP, gpio.INPUT_PULLUP, gpio.PULLDOWN esp32 <code>gpio.analog_read</code> <code>(gpio: int) -&gt; real</code>.Returns the voltage on a given pin in mV. Only used with DAC pins. esp32 <code>gpio.register_button</code> <code>(gpio: int, event_type: gpio.EVENT_TYPE,  handler: [() -&gt; void], config: map([high_state: bool])) -&gt; void</code>Registers a new handler called after interaction with a given button on provided <code>gpio</code>. Supports press, double press, and long press. esp32"},{"location":"plugins/scripting-language/#enum-inputevent_type","title":"enum <code>input.EVENT_TYPE</code>","text":"Command Description Supported platforms <code>gpio.PRESS</code> Called on single press of a button. esp32 <code>gpio.DOUBLE_PRESS</code> Called on double press of a button. esp32 <code>gpio.LONG_PRESS</code> Called on long press of a button. esp32"},{"location":"plugins/scripting-language/#example_4","title":"Example","text":"<p>GPIO Driver usage</p> <p>Sets GPIO 21 as output, writes its state to HIGH. <pre><code>gpio.pin_mode(21, gpio.OUTPUT)\ngpio.digital_write(21, gpio.HIGH)\n</code></pre></p>"},{"location":"plugins/scripting-language/#example_5","title":"Example","text":"<p>Example button that changes volume when pressed</p> <p>Register a button on gpio 5, and call a function from <code>playback</code> when pressed. <pre><code>gpio.register_button(5, input.PRESS, def ()\n    print(\"Volume up called!\")\n    playback.set_volume(playback.volume + 5)\nend, { 'high_state': true })\n</code></pre></p>"},{"location":"plugins/scripting-language/#led_strip","title":"<code>led_strip</code>","text":"<p>Allows for control of addressable LEDs like the WS28xx and SK6812. Underneath it uses esp32's RMT driver, to drive up to 8 separate strip instances.</p> <p>Implemented by <code>LEDDriver.cpp</code></p>"},{"location":"plugins/scripting-language/#class-ledstrip","title":"Class <code>LEDStrip</code>","text":"Field Signature Supported platforms <code>init / constructor</code> <code>(type: LED_TYPE, pin: int, len: int, channel: RMT_CHANNEL, brightness: int?)</code><code>LEDStrip</code> constructor. Allows control of a singular strip, with a driver <code>type</code>, connected under a GPIO <code>pin</code>. <code>channel</code> is the RMT channel to use. If <code>brightness</code> is provided, the entire LED chain will be dimmed accordingly. esp32 <code>show</code> <code>() -&gt; void</code> Called on existing instance. Will update the LED strip with previously assigned color values esp32 <code>set_item</code> <code>(index, item: [r: number, g: number, b: number]) -&gt; void</code>This implements the API for setting color of individual LEDs via a standard color assign. See example below for usage. <code>r</code>, <code>g</code> and <code>b</code> range from 0 to 255. esp32"},{"location":"plugins/scripting-language/#enum-led_stripled_type","title":"enum <code>led_strip.LED_TYPE</code>","text":"Value Description <code>LED_WS2812</code> Indicates WS2812 LED type. <code>LED_WS2812B</code> Indicates WS2812B LED type. <code>LED_SK6812</code> Indicates SK6812 LED type. <code>LED_WS2813</code> Indicates WS2813 LED type."},{"location":"plugins/scripting-language/#example_6","title":"Example","text":"<p>LED Driver usage</p> <p>Registers a new LED strip under pin 21, consisting of 12 WS2812 leds, at lower brightness. Then turns the first LED red, the second one green. <pre><code>volume_strip = LEDStrip(LED_WS2812, 21, 12, RMT_CHANNEL_0, 150)\n\n# change the first LED to red and second one to green.\nvolume_strip[0] = [255, 0, 0] # red in RGB format\nvolume_strip[1] = [0, 255, 0] # green in RGB format\n\n# display the changes on the strip\nvolume_strip.show()\n</code></pre></p>"},{"location":"plugins/scripting-language/#wifi","title":"<code>wifi</code>","text":"<p>Controls internal state of the platform's WiFi. Used internally by <code>wifi.be</code>.</p> <p>Implemented by <code>WiFiDriver.cpp</code></p>"},{"location":"plugins/scripting-language/#commands_10","title":"Commands","text":"Command Signature Supported platforms <code>wifi.init_stack</code> <code>() -&gt; void</code>Initializes the WiFi stack esp32 <code>wifi.connect</code> <code>(ssid: string, password: string, fromAP: bool) -&gt; void</code>Attempts WiFi connection. <code>fromAP</code> should be set according to the current WiFi mode. esp32 <code>wifi.start_ap</code> <code>(ssid: string, password: string) -&gt; void</code>Starts an access point with given credentials. esp32 <code>wifi.start_scan</code> <code>() -&gt; boid</code>.Starts scanning of WiFi networks. esp32"},{"location":"technical/adding-new-plugin/","title":"Extending Euphonium","text":""},{"location":"technical/adding-new-plugin/#euphonium-architecture","title":"Euphonium Architecture","text":"<p>There are essentially 4 layers of the Euphonium application which are:</p> <ul> <li>The Web UI written in React / Javascript</li> <li>The \"Application layer\" written in Berry Scripting language.</li> <li>A platform agnostic \"Feature layer\", written in C/C++</li> <li>A platform Specific \"Driver layer\", written in C/C++</li> </ul> <p>Plugins can integrate into each layer, and communicate between each layer. Having a firm understanding of how these layers communicate will help you understand what plugin's can do and what code you need to write when creating a new plugin.</p>"},{"location":"technical/adding-new-plugin/#web-plugins-in-brief","title":"Web Plugins in Brief","text":"<p>Plugins can expose functionality the users in the Web Application via the <code>make_form()</code> method of the application layer plugin. Forms in the web app have two distinct functions: (1) exposing the current plugin state to the user, and (2) receiving inputs such as updated settings from users. The Web app is extended by creating an application layer plugin and creating a form using it's <code>make_form()</code> method.</p> <p>Additionally the Web app is a React (Vite) app located in the <code>web/</code> directory that you can modify to your heart's content.</p>"},{"location":"technical/adding-new-plugin/#application-layer-plugins-in-brief","title":"Application Layer Plugins in Brief","text":"<p>Application layer plugins are written in Berry Scripting language and inherit from the Plugin Class</p> <p>Plugin scripts located in the <code>euphonium/scripts/plugins</code> and are used to define a new plugin class, instantiate the plugin and register it with Euphonium like so:</p> <pre><code>class MyPlugin : Plugin\ndef init()\n# Define constants like the plugin name\nend\n\ndef make_form(cts,state)\n# Create the form that allows users to set plugin settings in the Web UI\nend\n\ndef on_event(event, data)\n# Handle events, such as plugin initialization, updates to the plugin\n# state (in response to user interaction with the Web app)\nend\nend\n\n# Instantiate your plugin\nmy_plugin = MyPlugin()\n\n# Register your plugin with the euphonium application\neuphonium.register_plugin(my_plugin)\n</code></pre> <p>As of this writing, these are the events handled by the plugin's <code>on_event()</code> method:</p> <ul> <li>EVENT_CONFIG_UPDATED</li> <li>EVENT_VOLUME_UPDATED</li> <li>EVENT_SYSTEM_INIT</li> <li>EVENT_SET_PAUSE</li> <li>EVENT_PLUGIN_INIT</li> </ul>"},{"location":"technical/adding-new-plugin/#feature-layer-plugins-in-brief","title":"Feature Layer Plugins in Brief","text":"<p>Feature plugin interfaces are defined in the <code>euphonium/include/plugins/[pluginName]</code> directories and the methods are defined (out of line) in the <code>euphonium/src/plugins/[pluginName]</code> directories.</p> <p>Feature plugins inherit from the Module and bell::Task classes.</p> <p>For the purposes creating plugins, <code>bell::Task</code> has the interface:</p> <pre><code>class Task {\npublic:\nstd::string taskName;\nprotected:\n// Override this to start your plugin task\nvirtual void runTask() = 0;\n}\n</code></pre> <p>and the <code>Module</code> class has this interface:</p> <pre><code>class Module {\npublic:\nModule() {} // constructor\n\n// Module name:\nstd::string name;\n\n// Module Status:\nModuleStatus status = ModuleStatus::SHUTDOWN;\n\n// A shared pointer to the berry runtime (vm) which can be used to expose\n// data and functions as to the berry runtime\nstd::shared_ptr&lt;berry::VmState&gt; berry;\n\n// A shared pointer to the luaEventBus where events can be posted to the\n// application from the plugin\nstd::shared_ptr&lt;EventBus&gt; luaEventBus;\n\n// The audioBuffer\nstd::shared_ptr&lt;MainAudioBuffer&gt; audioBuffer;\n\n// configuration managed by the\nberry::map config;\n\n// PLUGIN LIFE CYCLE METHODS:\n\n// ??\nvirtual void loadScript(std::shared_ptr&lt;ScriptLoader&gt; scriptLoader) = 0;\n\n// Called by the Core application when the Berry runtime is ready to have\n// data and functions exported\nvirtual void setupBindings() = 0;\n\n// ??\nvirtual void startAudioThread() = 0;\n\n// Called by the Core application at shut down\nvirtual void shutdown() = 0;\n};\n</code></pre> <p>When Feature plugins are loaded, they are provided with a reference to the <code>berry</code> and <code>luaEventBus</code>, and then their <code>setupBindings()</code> method is called with the following:</p> <pre><code>// euphonium/src/Core.cpp\nplugin-&gt;berry = this-&gt;berry;\nplugin-&gt;luaEventBus = this-&gt;luaEventBus;\nplugin-&gt;setupBindings();\n</code></pre> <p>The <code>berry</code> and <code>luaEventsBus</code> are used to communicate with the application layer, as illustrated below.</p>"},{"location":"technical/adding-new-plugin/#driver-layer-plugins-in-brief","title":"Driver Layer Plugins in Brief","text":"<p>Driver layer plugins (drivers, really) implement platform specific features and are located in the platform specific <code>target/[platform]</code> directories. For example, the I2C driver for the ESP32 is contained in the <code>target/esp32/app/main/driver</code> directory. Drivers are used to expose platform specific features (e.g. I2C) to the application layer.</p>"},{"location":"technical/adding-new-plugin/#communication-between-euphonium-layers","title":"Communication between Euphonium Layers","text":""},{"location":"technical/adding-new-plugin/#communication-from-web-forms-to-application-layer-plugins","title":"Communication from Web Forms to Application Layer Plugins","text":"<p>The web forms in the settings section of the app communicate to the application layer via HTTP requests made to the <code>/plugins/:name</code> endpoint. When a <code>POST</code> request is made to this endpoint, the request body is used to update the plugin's state, and the plugin is notified that it's stat has been updated with a call to it's <code>on_event()</code> method like so:</p> <pre><code>plugin.on_event(EVENT_CONFIG_UPDATED, plugin.state)\n</code></pre> <p>Note that even though the new plugin stat is supplied as the second argument to this method call, the plugin's state has already been replaced before the method is called, so this invocation is merely an opportunity to respond to the state change; the method does not need to update it's own state in order for the state to be updated in this case.</p>"},{"location":"technical/adding-new-plugin/#application-layer-plugin-http-apis","title":"Application Layer Plugin HTTP APIs","text":"<p>Application layer plugins may expose API endpoints by registering a callback with the http plugin.</p>"},{"location":"technical/adding-new-plugin/#examples","title":"Examples","text":""},{"location":"technical/adding-new-plugin/#application-layer-plugin-example","title":"Application Layer Plugin Example","text":"<p>This plugin toggles a pin LOW or HIGH in response to http <code>POST</code> requests made at a custom endpoint. Users can select the output pin on the in the web ap under the \"LED Driver\" settings.</p> <pre><code>class LED_Driver : Plugin\nvar pin\n\ndef init()\nself.apply_default_values()\nself.name = \"led_driver\"\nself.theme_color = \"#d2c464\"\nself.display_name = \"LED Driver\"\nself.type = \"plugin\"\nend\n\ndef make_form(cts,state)\n# Create the form that allows users select the output pin for the LED\nctx.create_group('led-driver', { 'label': 'General' })\nctx.number_field('pin', {\n'label': \"Output Pin\",\n'default': \"0\",\n'group': 'led-driver',\n})\nend\n\ndef on_event(event, data)\nif event == EVENT_CONFIG_UPDATED\nif data.find('pin') != nil &amp;&amp; data['pin'] != '0'\ngpio.pin_mode(self.state['pin'], gpio.INPUT_PULLUP)\nend\nend\nif event == EVENT_PLUGIN_INIT\nif self.state.find('pin') != nil &amp;&amp; self.state['pin'] != '0'\ngpio.pin_mode(self.state['pin'], gpio.INPUT_PULLUP)\nend\nend\nend\n\ndef set_pin(pin_state)\n# custom method to be called by the HTTP callback\nif self.state.find('pin') == nil || self.state.pin == '0'\n# Output pin has not been set\nreturn\nend\ngpio.digital_write(self.pin,pin_state)\nend\n\nend\n\n# Instantiate the application layer plugin\nled_driver = LED_Driver()\n\n# Register the application layer plugin with the euphonium application\neuphonium.register_plugin(CSpotPlugin())\n\n# Register the http endpoint\nhttp.handle(\"POST\",\"/toggle-pin\",def\nif request.json_body() == 'true'\nled_driver.set_pin(gpio.HIGH)\nelse\nled_driver.set_pin(gpio.LOW)\nend\nend)\n</code></pre>"},{"location":"technical/adding-new-plugin/#the-event-bus","title":"The Event Bus","text":"<p>Communication within the Feature and to the Application layer can be achieved by posting messages to an Feature layer event bus. Messages posted to the Feature layer event bus are propagated to both Feature and application layer event subscribers.</p> <p>When Feature plugins are registered, a reference to the <code>mainEventBus</code> is bound to the plugin's <code>luaEventBus</code> property. Modules can therefor post events to the event bus using</p> <pre><code>this-&gt;luaEventBus-&gt;postEvent(std::move(event));\n</code></pre> <p>Feature layer plugins can subscribe to the event bus by registering a listener which implements the EventSubscriber interface. Plugins which implement an appropriate <code>handleEvent()</code> method can therefore register themselves as subscribers using:</p> <pre><code>auto subscriber = dynamic_cast&lt;EventSubscriber *&gt;(this);\nluaEventBus-&gt;addListener(EventType::LUA_MAIN_EVENT, *subscriber);\n</code></pre> <p>Notably the Euphonium Core registers itself as a subscriber, and uses that subscription to propagate events to the <code>handle_event</code> global in the application layer which then propagate those events to registered event handlers and plugins.</p> <p>Application layer plugins can receive events by registering a callback manually with the euphonium core using:</p> <pre><code>euphonium.register_handler('wifiStateChanged', def (event)\n# Do something when the wifi state changes...\nend)\n</code></pre> <p>Note that only one handler register may be registered to a given event.</p>"},{"location":"technical/adding-new-plugin/#asynchronous-tasks","title":"Asynchronous tasks","text":"<p>Application may need to do tasks periodically, such as update a display, call out to a web server, etc. As of this writing, these types of tasks cannot be accomplished in the application layer as berry language is synchronous, and code like this will block the application indefinitely :</p> <pre><code># Do *not* to this:\nwhile 1\ndo_something()\nsleep_ms(1000)\nend\n</code></pre> <p>Instead you'll need to create either a feature or driver plugin which inherits from <code>bell::Task</code> and runs your asynchronous tasks in a FreeRTOS task, like so:</p> <pre><code>MyAwesomePlugin::MyAwesomePlugin() : bell::Task(\"awesome\", 6 * 1024, 0, 1) {\nname = \"awesome\";\n// create the FreeRTOS Task to run the `runTask()` method\nthis-&gt;startTask();\n}\n\nvoid MyAwesomePlugin::runTask() {\nwhile (true) // or any FreeRTOS idiom like `for(auto item: someQueue)`\n{\ndo_something()\nvTaskDelay(1000 / portTICK_PERIOD_MS);\n}\n}\n</code></pre>"},{"location":"technical/adding-new-plugin/#exposing-c-objects-in-the-berry-language","title":"Exposing C++ Objects in the Berry language","text":"<p>While events can be propagated from the feature layer to the application layer, (as of this writing) the same mechanism cannot be used to communicate from the application layer to the feature layer. In order for the the feature layer to receive events from the application layer, feature plugins can bind functions, methods, and values into berry runtime.</p> <p>This is accomplished using the convenience methods of the <code>berry</code> reference that is attached to each feature plugin, such as:</p> <pre><code>// bind the MQTTPlugin::publish method to mqqt.plugin function in the berry runtime\nberry-&gt;export_this(\"publish\", this, &amp;MQTTPlugin::publish, \"mqtt\");\n\n// bind the gpioDigitalWrite function to gpio.digital_write function in the berry runtime\nberry-&gt;export_function(\"digital_write\", &amp;gpioDigitalWrite, \"gpio\");\n\n// bind the sleepMS function to sleep_ms global function in the berry runtime\nberry-&gt;export_function(\"sleep_ms\", &amp;sleepMS);\n</code></pre>"},{"location":"technical/adding-new-plugin/#installing-plugins","title":"Installing Plugins","text":""},{"location":"technical/adding-new-plugin/#installing-application-layer-plugins","title":"Installing Application layer plugins","text":"<p>The Berry scripts that define the application layer plugins are stored in the <code>euphonium/scripts/plugin</code> directory.</p> <p>Pro Tip: Start by creating a blank file (<code>my-plugin.be</code>) for your plugin, then compile, flash, and run the Euphonium application. This will create a new empty file in the that you can edit using the Web IDE. The Web IDE is a web application that you can run from your local machine, connect to your ESP32, edit your new plugin and debug your code in real time. When the plugin is working the way you like it, copy your code out of the web IDE and into your plugin's <code>.be</code> file.</p> <p>You can start the Web IDE by navigating to the <code>/web-ide</code> in the repo, with these commands:</p> <pre><code># install the dependencies (only required once)\nyarn install\n\n# Run the Web IDE application\nyarn start\n</code></pre> <p>then Navigate to <code>http://localhost:3000</code> (if the window doesn't open on it's own) to use the Web IDE</p>"},{"location":"technical/adding-new-plugin/#installing-feature-layer-cc-plugins","title":"Installing Feature layer (C/C++) plugins","text":""},{"location":"technical/adding-new-plugin/#installing-the-cpp-and-h-files","title":"Installing the <code>.cpp</code> and <code>.h</code> files:","text":"<p>Your plugin will need <code>.h</code> and <code>.cpp</code> files, which you can create with:</p> <pre><code>pushd euphonium/src/plugins\nmkdir newFeature\ncd newFeature\ntouch newFeaturePlugin.cpp\npopd\n</code></pre> <p>and:</p> <pre><code>pushd euphonium/include/plugins\nmkdir newFeature\ncd newFeature\ntouch newFeaturePlugin.h\npopd\n</code></pre> <p>Next, you'll need to tell the build system about the source files for your new plugin by adding to the list of glob patterns (e.g. <code>\"src/plugins/my-plugin/*.cpp\"</code> or <code>\"src/plugins/my-plugin/*.c\"</code>) here in the same <code>CMakeLists.txt</code> file.</p> <p>You also need to add your include directory near the bottom of <code>euphonium/CMakeLists.txt</code> like so:</p> <pre><code>include_directories(\"include/plugins/my-plugin\")\n</code></pre> <p>Finally, you'll need to add include your plugin's header file to <code>euphonium/include/Core.cpp</code>, and add your plugin to the list of registered plugins in <code>euphonium/src/Core.cpp</code></p>"},{"location":"technical/adding-new-plugin/#using-libraries-with-feature-plugins","title":"Using libraries with Feature Plugins","text":"<p>If your plugin is going to rely on existing external C/C++ libraries, then you'll need to load them into the repo (preferably as sub-modules), and tell the build system about the additional libraries. For example, if you want to library from <code>github.com/some/great-library</code>, then you'll want to clone in into <code>euphonium/</code> with:</p> <pre><code>git submodule add ../../some/great-library euphonium/great-library\n</code></pre> <p>and then update <code>euphonium/CMakeLists.txt</code> with your dependency. Probably something like</p> <pre><code>add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/bell ${CMAKE_CURRENT_BINARY_DIR}/bell)\n</code></pre> <p>as well as adding your library to this lists in <code>target_link_libraries()</code> and <code>target_include_directories()</code>. A note of caution: Libraries that are aware of or depend on the esp-idf features are likely to flummox the build process if they are included in the euphonium core (<code>euphonium/</code>)</p>"},{"location":"technical/adding-new-plugin/#installing-platform-specific-drivers","title":"Installing Platform Specific Drivers","text":"<p>Platform specific drivers, will depend on the platform. New feature drivers for the ESP32, for example, can be installed with:</p> <pre><code>pushd targets/esp32/app/main/driver\nmkdir feature\ncd feature\ntouch featureDriver.cpp\ntouch featureDriver.h\npopd\n</code></pre> <p>Driver functionality should be exposed to the Application layer in the usual ways:</p> <ul> <li> <p>Exporting C/C++ functions into the Berry language vm with the export helpers   (<code>berry-&gt;export_something()</code>), which the ESP32 platform exposes to the drivers   registers   here</p> </li> <li> <p>create a plugin which inherits from <code>bell::Task</code> and register it as a plugin   in main.cpp, which is how the Bluetooth Plugin is registered in the ESP32 target.</p> </li> </ul>"},{"location":"technical/adding-new-plugin/#using-esp-idf-libraries-with-drivers","title":"Using ESP-IDF Libraries with (Drivers)","text":"<p>When writing drivers for the ESP32, the ESP-IDF will automatically include projects in the <code>targets/esp32/app/components</code> directory. For example, if you want to add a display using the awesome <code>u8g2</code> library, you could add the required libraries as git submodules like so:</p> <pre><code>git submodule add ../../olikraus/u8g2 targets/esp32/app/components/u8g2\ngit submodule add ../../mkfrey/u8g2-hal-esp-idf targets/esp32/app/components/u8g2-hal-esp-idf\n</code></pre> <p>and like that, your new components can be consumed in your driver files.</p>"},{"location":"technical/architecture/","title":"Architecture","text":""},{"location":"technical/architecture/#plugins","title":"Plugins","text":""},{"location":"technical/architecture/#scripting-language-structure","title":"Scripting language structure","text":"<p>The following table describes folder structure of the internal scripting file system.</p>"},{"location":"technical/architecture/#folder-internal","title":"Folder <code>internal</code>","text":"<p>Rewritten by OTA</p> <p>Contains the core of the application. This handles the central classes, main http endpoints, and is the main entrypoint.</p> File Description <code>internal/init.be</code> Main entrypoint of the script loader. Do not add your extensions here, please see <code>extensions.be</code>. <code>internal/api.be</code> Implementation of the main Euphonium REST API. <code>internal/bindings.be</code> Shallow binding classes that allow for communication between Berry and C++. <code>internal/euphonium.be</code> Main Euphonium class which handles system initialization, event handling and plugin registration. <code>internal/http.be</code> Sugar syntax wrapper over the native HTTP server. <code>internal/app-version</code> Text file containing current version, needed for OTA."},{"location":"technical/architecture/#folder-vendor","title":"Folder <code>vendor</code>","text":"<p>Rewritten by manufacturer OTA</p> <p>Contains vendor-specific code. This allows for customization of euphonium for different manufacturers. Code here is rewritten with every manufacturer OTA.</p> <ul> <li><code>vendor/init.be</code> - Entry point for all vendor-specific code.</li> </ul> <p>Rest of the code here is product-specific.</p>"},{"location":"technical/architecture/#folder-configuration","title":"Folder <code>configuration</code>","text":"<p>Contains saved configuration of the app in form of <code>*.config.json</code> files.</p>"},{"location":"technical/architecture/#folder-esp32","title":"Folder <code>esp32</code>","text":"<p>Contains the ESP32 platform support. TODO: Describe structure.</p>"},{"location":"technical/architecture/#folder-extensions","title":"Folder <code>extensions</code>","text":"<p>Contains all user scripts. These are loaded last, after all other scripts. You can register your custom driver by appending to <code>extensions.be</code> file.</p>"},{"location":"technical/dev-environment/","title":"Setup","text":"<p>The best way to try euphonium is to flash a prebuilt version. However, if you want to build it yourself, or help out with development, you will need a few dependencies to get this project to build.</p>"},{"location":"technical/dev-environment/#checkout-code","title":"Checkout code","text":"<p>When checking out the repository, use <code>--recursive</code> to retrieve all submodules. Alternately, after checkout use <code>git submodule update --init --recursive</code> to perform the same task.</p> <pre><code>git clone --recursive https://github.com/feelfreelinux/euphonium\n</code></pre>"},{"location":"technical/dev-environment/#setting-up-web-ui-bundler","title":"Setting up web UI bundler","text":"<p>First, a required step is to setup all of the dependencies required to build the web UI.</p>"},{"location":"technical/dev-environment/#python","title":"python","text":"<p>Python needs to be installed on your system. Ensure that you have <code>pip</code> installed. This can be done by</p> <pre><code>python -m ensurepip --upgrade\n</code></pre> <p>Then we can install the needed dependencies by using the <code>requirements.txt</code> file. Execute this command to install the needed dependencies (from the root of the project):</p> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"technical/dev-environment/#nodejs","title":"nodejs","text":"<p>you need at least version 14. Precompiled distrobution packages with installation instructions can be found here: https://github.com/nodesource/distributions</p>"},{"location":"technical/dev-environment/#npm","title":"npm","text":"<p>Npm should be included in the nodesource package. Otherwise the installation is platform specific, but mostly just comes down to installing it through a package manager.</p>"},{"location":"technical/dev-environment/#yarn","title":"yarn","text":"<p>be careful: don't install yarn from default package repository on Debian or Ubuntu. It would install the package <code>cmdtest</code> for you. To be sure you may run <code>sudo apt remove cmdtest</code> first.</p> <p>The right package can be installed with: <pre><code>corepack enable\nyarn set version stablerm -rf bu        \n</code></pre></p>"},{"location":"technical/dev-environment/#setting-up-dependencies-for-target-platform","title":"Setting up dependencies for target platform","text":"<p>Depending on the target platform, (esp32 or cli) the dependencies are differnt.</p>"},{"location":"technical/dev-environment/#desktop-specific-dependencies","title":"Desktop specific dependencies","text":"<ul> <li>PortAudio library</li> <li>OpenSSL library</li> </ul> <p>both can be installed with a package manager.</p> <p>If you are on macOS then we can do this with <code>brew</code>: <pre><code>brew install OpenSSL PortAudio\n</code></pre></p> <p>If you are on Ubuntu/Debian you can install with: <pre><code>sudo apt install libmbedtls-dev protobuf-compiler openssl libasound-dev portaudio19-dev libportaudio2 libportaudiocpp0\n</code></pre></p>"},{"location":"technical/dev-environment/#needed-libs-on-linux","title":"Needed libs on Linux","text":"<p>When building on linux you will also need the follwoing dependency: <code>libavahi-compat-libdnssd-dev</code>. This can be installed by <pre><code>sudo apt-get install libavahi-compat-libdnssd-dev\n</code></pre></p>"},{"location":"technical/dev-environment/#esp32-specific-dependencies","title":"ESP32-Specific dependencies","text":"<ul> <li><code>esp-idf</code> in version <code>4.4.1</code>. Please follow Espressif's guide.</li> </ul> <p>As an alternative you can install VSCode (https://code.visualstudio.com/) and open the euphonium folder. VSCode should recommend the following extensions to you: - \"espressif.esp-idf-extension\" - \"platformio.platformio-ide\" (optional) - \"berry.berry\" (optional)</p> <p>In this case the installation of ESP-IDF is managed by vscode. If the extensions are installed you can open the ESP-IDF terminal (<code>STRG + E</code> followed by <code>T</code>) and continue building as described below.</p>"},{"location":"technical/dev-environment/#hint-for-linux-mint","title":"Hint for Linux Mint","text":"<p>In order for the CLI build to work on Linux Mint I had to add a little extra CLI arg to the <code>cmake</code> command, as it doesn't know how to find the correct library it would seem. Maybe this could be added directly into the <code>cmake</code> setup?</p> <p>To fully compile the <code>cli</code> on Linux Mint execute the following <pre><code>cmake -DCMAKE_CXX_STANDARD_LIBRARIES=\"-ldl\" ..\nmake\n</code></pre></p>"},{"location":"technical/dev-environment/#building-and-installing-the-project-desktop","title":"Building and installing the project - Desktop","text":"<p>For a desktop run, please run the following commands</p> <p>Setup</p> <pre><code>cd targets/cli\nmkdir build &amp;&amp; cd build\ncmake ..\n</code></pre> <p>Build</p> <pre><code>make\n</code></pre> <p>This will output a binary <code>euphoniumcli</code> which can be later executed to run the platform. The web-ui will be available on port <code>80</code> by default. If you have trouble using port 80 (on Linux for example), use <code>cmake .. -D HTTP_SERVER_PORT=8080</code> to change the web-ui port.</p>"},{"location":"technical/dev-environment/#building-and-installing-the-project-esp32","title":"Building and installing the project - ESP32","text":"<p>For ESP32 target, please run following commands (with esp-idf in the PATH)</p> <p>Setup</p> <pre><code>cd targets/esp32\nsh build_recovery.sh\nsh build_app.sh\n</code></pre> <p>Build</p> <p>For full flash: <pre><code>sh flash_all.sh {serialport}\n</code></pre> For app-only flash: <pre><code>sh reflash_app.sh {serialport}\n</code></pre> For spiffs only flash (berry scripts, webui, configuration): <pre><code>sh reflash_spiffs.sh {serialport}\n</code></pre></p>"},{"location":"technical/dev-environment/#development-improvements","title":"Development improvements","text":"<p>There are a few tricks to make the development faster</p>"},{"location":"technical/dev-environment/#preconfiguration-of-wifi-and-dac","title":"Preconfiguration of WIFI and DAC","text":"<p>Every flash of the spiffs partition will reset the internal configuration. It's a bit of a pain when dealing with esp32, as you have to deal with reconfiguration of the system through the AP network with every flash. To avoid this, you can preconfigure the WiFi settings (any any other setting!) to be included in the flashed partition.</p> <p>To configure WiFi, create a file inside of <code>euphonium/scripts/configuration</code> folder, named <code>wifi.config.json</code>, containing following data</p> <pre><code>{\n    \"ssid\": \"YOUR NETWORK SSID\",\n    \"password\": \" YOUR NETWORK PASSWORD\"\n}\n</code></pre> <p>After rerunning the <code>reflash_spiffs</code> script WiFi is going to be preconfigured :)</p>"},{"location":"technical/tasks/","title":"Tasks - esp32 specific","text":"<p>The following table lists all of internal FreeRtos tasks running in Euphonium, along with their core affinity and stack size.</p>"},{"location":"technical/tasks/#core-system","title":"Core / system","text":"Task name Type Stack size Core affinity Priority PSRAM wifi system - 0 - No bluetooth system - 1 - No euphonium core 8192 0 2 No Core core 4096 0 2 Yes http plugin 6144 0 1 No persistor plugin 4096 1 0 No"},{"location":"technical/tasks/#cspot-plugin","title":"CSpot - plugin","text":"<p>Always active tasks run all the time when euphonium is IDLE, remaining only runs during playback.</p>"},{"location":"technical/tasks/#considerations","title":"Considerations","text":"<p>Due to internal use of hardware AES, <code>AudioChunkManager</code> needs to be ran on same core as <code>wifi</code>.</p> Task name Stack size Core affinity Priority PSRAM Always active CSpotPlugin 4096 1 0 Yes Yes MercuryManager 6144 1 1 Yes No AudioChunkManager 4096 0 1 Yes No Player 10240 1 0 Yes No"},{"location":"technical/tasks/#web-radio-plugin","title":"Web Radio - plugin","text":"<p>Always active tasks run all the time when euphonium is IDLE, remaining only runs during playback.</p> Task name Stack size Core affinity Priority PSRAM Always active WebRadioPlugin 6144 1 1 Yes Yes"}]}